import re
import logging
from aiogram.types import Message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def safe_delete(message: Message):
    try:
        await message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def is_valid_url(url: str) -> bool:
    url = url.strip()
    if not url:
        return False
    pattern = re.compile(
        r'^https?://'
        r'(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}|'  # –¥–æ–º–µ–Ω
        r'localhost|'
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IPv4
        r'(?::\d+)?(?:/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?$'
    )
    return bool(pattern.match(url))

def format_link_stats(stats: dict, short_url: str) -> str:
    if not stats or stats.get("views", 0) == 0:
        return f"üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ <b>{short_url}</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥—ã."

    total_views = stats.get("views", 1)
    response = [f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {short_url}</b>",
                f"<b>–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {total_views}\n"]

    # –ü–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç
    if "sex_age" in stats:
        response.append("<b>üë• –¢–æ–ø-3 –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>")
        sex_map = {1: "–º—É–∂—á–∏–Ω—ã", 2: "–∂–µ–Ω—â–∏–Ω—ã"}
        top_groups = sorted(stats["sex_age"], key=lambda x: x.get("views", 0), reverse=True)[:3]
        for group in top_groups:
            age = group.get("age_range", "?")
            sex = sex_map.get(group.get("sex"), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            views = group.get("views", 0)
            percent = views / total_views * 100 if total_views else 0
            response.append(f"‚Äì {sex}, {age}: {views} ({percent:.1f}%)")

    # –°—Ç—Ä–∞–Ω—ã
    if "countries" in stats:
        country_map = {
            1: "–†–æ—Å—Å–∏—è", 2: "–£–∫—Ä–∞–∏–Ω–∞", 3: "–ë–µ–ª–∞—Ä—É—Å—å", 4: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", 5: "–ì–µ—Ä–º–∞–Ω–∏—è",
            7: "–§–∏–Ω–ª—è–Ω–¥–∏—è", 10: "–°–®–ê", 13: "–§—Ä–∞–Ω—Ü–∏—è", 14: "–ò—Ç–∞–ª–∏—è", 17: "–ò—Å–ø–∞–Ω–∏—è"
        }
        top_countries = sorted(stats["countries"], key=lambda x: x["views"], reverse=True)[:3]
        response.append("\n<b>üåç –°—Ç—Ä–∞–Ω—ã:</b>")
        for c in top_countries:
            cid = c.get("country_id")
            views = c.get("views", 0)
            name = country_map.get(cid, f"ID {cid}")
            percent = views / total_views * 100 if total_views else 0
            response.append(f"‚Äì {name}: {views} ({percent:.1f}%)")

    # –ì–æ—Ä–æ–¥–∞
    if "cities" in stats:
        city_map = {
            1: "–ú–æ—Å–∫–≤–∞", 2: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 99: "–£—Ñ–∞", 56: "–ö–∞–∑–∞–Ω—å",
            3: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", 4: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", 66: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"
        }
        top_cities = sorted(stats["cities"], key=lambda x: x["views"], reverse=True)[:3]
        response.append("\n<b>üèôÔ∏è –ì–æ—Ä–æ–¥–∞:</b>")
        for c in top_cities:
            cid = c.get("city_id")
            views = c.get("views", 0)
            name = city_map.get(cid, f"ID {cid}")
            percent = views / total_views * 100 if total_views else 0
            response.append(f"‚Äì {name}: {views} ({percent:.1f}%)")

    return "\n".join(response)
