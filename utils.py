import re
import logging
from aiogram.types import Message

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def safe_delete(message: Message):
    try:
        await message.delete()
    except:
        pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ

def is_valid_url(url: str) -> bool:
    url = url.strip()
    if not url:
        return False
    pattern = re.compile(
        r'^https?://'  # http:// –∏–ª–∏ https://
        r'(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}|'  # –¥–æ–º–µ–Ω
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
        r'(?::\d+)?(?:/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?$'
    )
    return bool(pattern.match(url))

def format_link_stats(stats: dict, short_url: str) -> str:
    if not stats or "views" not in stats or stats.get("views", 0) == 0:
        return f"üìâ –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ {short_url}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã."
    
    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {short_url}\n"
    response += f"üëÅ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats.get('views', 0)}\n\n"

    if "sex_age" in stats:
        sex_age = {}
        for item in stats["sex_age"]:
            age_range = item["age_range"]
            sex = "–ú—É–∂—á–∏–Ω—ã" if item["sex"] == 1 else "–ñ–µ–Ω—â–∏–Ω—ã"
            views = item["views"]
            sex_age.setdefault(age_range, {}).setdefault(sex, 0)
            sex_age[age_range][sex] += views
        response += "üë§ –ü–æ–ª / –≤–æ–∑—Ä–∞—Å—Ç:\n"
        for age, sexes in sex_age.items():
            men = sexes.get("–ú—É–∂—á–∏–Ω—ã", 0)
            women = sexes.get("–ñ–µ–Ω—â–∏–Ω—ã", 0)
            total = men + women
            if total > 0:
                response += f"‚Äî {age}: –ú—É–∂—á–∏–Ω—ã {men/total*100:.0f}%, –ñ–µ–Ω—â–∏–Ω—ã {women/total*100:.0f}%\n"

    if "countries" in stats:
        response += "\nüåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è (–ø–µ—Ä–µ—Ö–æ–¥—ã):\n"
        total_views = stats.get("views", 1)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        for country in stats["countries"]:
            country_id = country["country_id"]
            views = country["views"]
            country_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä—Å–µ—Ä –¥–ª—è country_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫)
            response += f"‚Äî {country_name} (ID {country_id}): {views} ({views/total_views*100:.1f}%)\n"
        if "cities" in stats:
            response += "–ì–æ—Ä–æ–¥–∞:\n"
            for city in stats["cities"]:
                city_id = city["city_id"]
                views = city["views"]
                city_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä—Å–µ—Ä –¥–ª—è city_id
                response += f"  ‚Äî {city_name} (ID {city_id}): {views} ({views/total_views*100:.1f}%)\n"

    return response
