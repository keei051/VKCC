from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from database import get_link_by_id, delete_link, rename_link
from keyboards import main_menu, link_inline_keyboard

router = Router()

class RenameStates(StatesGroup):
    renaming = State()

# üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–µ
@router.callback_query(F.data.startswith("stats:"))
async def show_stats(callback: CallbackQuery):
    try:
        link_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", show_alert=True)
        return

    user_id = callback.from_user.id
    link = await get_link_by_id(link_id, user_id)
    if not link:
        await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    _, _, original_url, short_url, title, _, created_at = link
    created_str = created_at[:10] if isinstance(created_at, str) else created_at.strftime("%Y-%m-%d")

    text = (
        f"üîó <b>{title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n\n"
        f"–ò—Å—Ö–æ–¥–Ω–∞—è: <code>{original_url}</code>\n"
        f"–°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è: <code>{short_url}</code>\n"
        f"üìÜ {created_str}"
    )

    await callback.message.edit_text(text, reply_markup=link_inline_keyboard(link_id), parse_mode="HTML")
    await callback.answer()

# üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("delete:"))
async def delete_link_handler(callback: CallbackQuery):
    try:
        link_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return

    user_id = callback.from_user.id
    deleted = await delete_link(link_id, user_id)
    if deleted:
        await callback.message.edit_text("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å.", show_alert=True)

# ‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data.startswith("rename:"))
async def rename_prompt(callback: CallbackQuery, state: FSMContext):
    try:
        link_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ ID", show_alert=True)
        return

    await state.update_data(rename_id=link_id)
    await state.set_state(RenameStates.renaming)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await callback.answer()

# ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(RenameStates.renaming)
async def process_rename(message: Message, state: FSMContext):
    new_title = message.text.strip()
    data = await state.get_data()
    link_id = data.get("rename_id")
    user_id = message.from_user.id

    if not new_title or len(new_title) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        await state.clear()
        return

    if await rename_link(link_id, user_id, new_title):
        link = await get_link_by_id(link_id, user_id)
        if link:
            _, _, original_url, short_url, _, _, created_at = link
            created_str = created_at[:10] if isinstance(created_at, str) else created_at.strftime("%Y-%m-%d")
            text = (
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üîó <b>{new_title}</b>\n"
                f"–ò—Å—Ö–æ–¥–Ω–∞—è: <code>{original_url}</code>\n"
                f"–°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è: <code>{short_url}</code>\n"
                f"üìÜ {created_str}"
            )
            try:
                await message.answer(text, reply_markup=link_inline_keyboard(link_id), parse_mode="HTML")
            except TelegramBadRequest:
                await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å.")
        else:
            await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")

    await state.clear()
