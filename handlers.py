import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hlink
from aiogram.exceptions import TelegramBadRequest

from keyboards import (
    get_main_inline_keyboard,
    get_link_card_keyboard,
    get_stats_keyboard,
    get_delete_confirm_keyboard,
    get_rename_keyboard,
)
from database import (
    save_link,
    get_links_by_user,
    get_link_by_id,
    get_link_by_original_url,
    delete_link,
    rename_link,
    check_duplicate_link,
)
from utils import is_valid_url, format_date, format_link_stats
from vkcc import shorten_link, get_link_stats
from config import VK_TOKEN, MAX_LINKS_PER_BATCH

router = Router()
logger = logging.getLogger(__name__)

class LinkStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_title = State()
    waiting_for_mass_title = State()
    waiting_for_new_title = State()

class ThrottlingMiddleware:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥."""
    def __init__(self, rate_limit_seconds: int = 2):
        self.rate_limit = rate_limit_seconds
        self.last_requests = {}

    async def __call__(self, handler, event, data):
        user_id = event.from_user.id
        current_time = datetime.now()
        last_request = self.last_requests.get(user_id)

        if last_request and (current_time - last_request).total_seconds() < self.rate_limit:
            await event.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                reply_markup=get_main_inline_keyboard(),
                parse_mode="HTML"
            )
            return
        self.last_requests[user_id] = current_time
        return await handler(event, data)

# –ü—Ä–∏–º–µ–Ω—è–µ–º middleware —Ç–æ–ª—å–∫–æ –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
router.message.middleware(ThrottlingMiddleware())

async def safe_edit(bot, chat_id, message_id, text, reply_markup=None):
    try:
        return await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {e}")
            return None
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode="HTML")

async def safe_delete(message: Message):
    try:
        await message.delete()
    except TelegramBadRequest as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}: {e}")

async def cleanup_old_messages(bot, chat_id, message_id):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç."""
    try:
        message = await bot.get_message(chat_id, message_id)
        if message.date < datetime.now() - timedelta(minutes=5):
            await bot.delete_message(chat_id, message_id)
    except TelegramBadRequest:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

async def process_and_save_link(url: str, title: str, message: Message, state: FSMContext) -> tuple[bool, str, str | None]:
    if not VK_TOKEN:
        return False, "‚ùå –û—à–∏–±–∫–∞: VK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None
    if len(title) > 100:
        return False, "‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None
    if not is_valid_url(url):
        return False, f"‚ùå –û—à–∏–±–∫–∞: '{url}' ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None
    try:
        if check_duplicate_link(message.from_user.id, url):
            return False, f"‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ '{url}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None
        
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–∫–∏: user_id={message.from_user.id}, url={url}")
        short_url = await shorten_link(url, VK_TOKEN)
        if not short_url:
            return False, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É (VK API –Ω–µ –≤–µ—Ä–Ω—É–ª short_url).\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None
        logger.info(f"–°—Å—ã–ª–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞: {short_url}")
        vk_key = short_url.split("/")[-1]
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É: user_id={message.from_user.id}, short_url={short_url}, title={title}")
        if save_link(message.from_user.id, url, short_url, title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", vk_key):
            return True, f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {hlink(title or '–°—Å—ã–ª–∫–∞', short_url)}\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", short_url
        return False, f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É '{url}'.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", None

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await safe_delete(message)
    logger.info(f"–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è user_id={message.from_user.id}")
    user_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ vkcc-link-bot ‚Äî —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
        reply_markup=get_main_inline_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    await safe_delete(message)
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –¥–ª—è user_id={message.from_user.id}")
    await message.answer(
        "üìö –ü–æ–º–æ—â—å –ø–æ vkcc-link-bot:\n"
        "‚ûñ /start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ûñ '–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É' ‚Äî –°–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –¥–æ 50 —Å—Å—ã–ª–æ–∫\n"
        "‚ûñ '–ú–æ–∏ —Å—Å—ã–ª–∫–∏' ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫\n\n"
        "<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
        reply_markup=get_main_inline_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

@router.message(F.text.lower().strip() == "—Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def start_shorten(message: Message, state: FSMContext):
    await safe_delete(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shorten")]
    ])
    msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ (–¥–æ 50, –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –º–æ–∂–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: —Å—Å—ã–ª–∫–∞ | –æ–ø–∏—Å–∞–Ω–∏–µ).",
        reply_markup=keyboard
    )
    await state.update_data(initial_msg=msg.message_id)
    await state.set_state(LinkStates.waiting_for_url)

@router.callback_query(F.data == "shorten_link")
async def shorten_link_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if not callback.message:
        logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback.bot.send_message(
            callback.from_user.id,
            "‚ùå –û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    await start_shorten(callback.message, state)

@router.callback_query(F.data == "show_links")
async def show_links_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if not callback.message:
        logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback.bot.send_message(
            callback.from_user.id,
            "‚ùå –û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    await show_user_links(callback.message, state)

@router.callback_query(F.data == "cancel_shorten")
async def cancel_shorten_handler(callback: CallbackQuery, state: FSMContext):
    await safe_delete(callback.message)
    await callback.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    if not callback.message:
        logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è callback –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback.bot.send_message(
            callback.from_user.id,
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        return
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    await cmd_start(callback.message, state)

@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    await callback.answer()

@router.message(F.text)
async def handle_unknown_message(message: Message):
    logger.debug(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={message.from_user.id}: {message.text}")
    await safe_delete(message)
    await message.answer(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
        reply_markup=get_main_inline_keyboard(),
        parse_mode="HTML"
    )

@router.message(LinkStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    initial_msg_id = data.get("initial_msg")
    try:
        await safe_edit(message.bot, message.chat.id, initial_msg_id, "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫–∏...")
    except TelegramBadRequest:
        logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {initial_msg_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        msg = await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫–∏...")
        await state.update_data(initial_msg=msg.message_id)
        initial_msg_id = msg.message_id
    urls = [line.strip() for line in message.text.split("\n") if line.strip()]

    if not urls:
        await safe_edit(
            message.bot, message.chat.id, initial_msg_id,
            "‚ùå –û—à–∏–±–∫–∞: –ù–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            get_main_inline_keyboard()
        )
        await state.clear()
        return
    if len(urls) > MAX_LINKS_PER_BATCH:
        await safe_edit(
            message.bot, message.chat.id, initial_msg_id,
            f"‚ùå –û—à–∏–±–∫–∞: –õ–∏–º–∏—Ç ‚Äî {MAX_LINKS_PER_BATCH} —Å—Å—ã–ª–æ–∫.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            get_main_inline_keyboard()
        )
        await state.clear()
        return

    processed = []
    failed = []
    for url in urls:
        if "|" in url:
            u, t = map(str.strip, url.split("|", 1))
            if len(t) > 100:
                failed.append(f"‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {u} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
                continue
        else:
            u, t = url.strip(), None
        if not is_valid_url(u):
            failed.append(f"‚ùå –û—à–∏–±–∫–∞: {u} ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
            continue
        processed.append((u, t))

    if failed:
        await state.update_data(failed_links=failed)
    if not processed:
        text = "‚ùå –û—à–∏–±–∫–∞: –ù–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏.\n" + "\n".join(failed) + "\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
        await safe_edit(message.bot, message.chat.id, initial_msg_id, text, get_main_inline_keyboard())
        await state.clear()
        return

    await state.update_data(urls=processed, initial_msg=initial_msg_id, successful_links=[])
    if len(processed) == 1:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shorten")]
        ])
        await safe_edit(
            message.bot, message.chat.id, initial_msg_id,
            f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {processed[0][0]} (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º).",
            keyboard
        )
        await state.set_state(LinkStates.waiting_for_title)
    else:
        await state.set_state(LinkStates.waiting_for_mass_title)
        await process_mass_urls(message, state)

async def process_mass_urls(message: Message, state: FSMContext):
    data = await state.get_data()
    urls = data.get("urls", [])
    initial_msg_id = data.get("initial_msg")
    if not urls:
        await finalize_mass_processing(message, state)
        return
    current_url, current_title = urls[0]
    await state.update_data(
        current_url=current_url,
        current_title=current_title,
        urls=urls[1:],
        successful_links=data.get("successful_links", []),
        failed_links=data.get("failed_links", [])
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shorten")]
    ])
    await safe_edit(message.bot, message.chat.id, initial_msg_id, f"–°–æ–∫—Ä–∞—â–∞—é: {current_url}", keyboard)

@router.message(LinkStates.waiting_for_title)
async def process_single_title(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    url, _ = data.get("urls", [(None, None)])[0]
    title = message.text.strip() if message.text else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    initial_msg_id = data.get("initial_msg")
    success, result, short_url = await process_and_save_link(url, title, message, state)
    link = get_link_by_original_url(message.from_user.id, url)
    link_id = link[0] if link else None
    keyboard = get_main_inline_keyboard()
    if success and short_url and link_id:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy:{short_url}"),
            InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename:{link_id}")
        ])
    await safe_edit(message.bot, message.chat.id, initial_msg_id, result, keyboard)
    await state.clear()

@router.message(LinkStates.waiting_for_mass_title)
async def process_mass_title(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    current_url, current_title = data.get("current_url"), data.get("current_title")
    title = message.text.strip() if message.text else current_title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    initial_msg_id = data.get("initial_msg")
    success, result, short_url = await process_and_save_link(current_url, title, message, state)
    link = get_link_by_original_url(message.from_user.id, current_url)
    link_id = link[0] if link else None

    if len(title) > 100:
        data.setdefault("failed_links", []).append(
            f"‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {current_url} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
    else:
        if success and link_id:
            data.setdefault("successful_links", []).append({"title": title, "short_url": short_url, "link_id": link_id})
        else:
            data.setdefault("failed_links", []).append(result)

    await state.update_data(successful_links=data["successful_links"], failed_links=data["failed_links"])

    if data.get("urls"):
        await process_mass_urls(message, state)
    else:
        await finalize_mass_processing(message, state)

async def finalize_mass_processing(message: Message, state: FSMContext):
    data = await state.get_data()
    initial_msg_id = data.get("initial_msg")
    s = data.get("successful_links", [])
    f = data.get("failed_links", [])
    partial_success = len(s) > 0

    text = f"{'‚úÖ' if partial_success else '‚ùå'} –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(s)}\n"
    for i, link in enumerate(s, 1):
        text += f"{i}. {link['title']} ‚Äî {hlink(link['title'], link['short_url'])}\n"
    if f:
        text += "\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(f)
    text += "\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"

    keyboard = get_main_inline_keyboard()
    if partial_success:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="copy_all"),
            InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="rename_mass")
        ])
    await safe_edit(message.bot, message.chat.id, initial_msg_id, text, keyboard)
    await state.clear()

@router.message(F.text.lower().strip() == "–º–æ–∏ —Å—Å—ã–ª–∫–∏")
async def show_user_links(message: Message, state: FSMContext):
    await safe_delete(message)
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è user_id={message.from_user.id}")
    links = get_links_by_user(message.from_user.id)
    if not links:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    await state.update_data(links=links, page=1, last_msg_id=None)
    await send_links_page(message, links, 1, state)

async def send_links_page(message: Message, links, page, state: FSMContext):
    per_page = 5
    total_pages = max(1, len(links) // per_page + (1 if len(links) % per_page else 0))
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    end = start + per_page
    current_links = links[start:end]

    keyboard = []
    for link in current_links:
        link_id, title, short_url, created_at = link
        created_str = format_date(created_at)
        keyboard.append([InlineKeyboardButton(text=f"üìç {title}", callback_data=f"link:{link_id}")])
    if total_pages > page:
        keyboard.append([InlineKeyboardButton(text="üìÑ –î–∞–ª–µ–µ", callback_data=f"page:{page+1}")])
    if page > 1:
        keyboard.append([InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}")])

    text = f"<b>üìé –í–∞—à–∏ —Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):</b>"
    data = await state.get_data()
    last_msg_id = data.get("last_msg_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except TelegramBadRequest:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {last_msg_id}, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")

    new_msg = await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    await state.update_data(links=links, page=page, last_msg_id=new_msg.message_id)

@router.callback_query(F.data.startswith("page:"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    try:
        page = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)
        return
    data = await state.get_data()
    links = data.get("links", get_links_by_user(callback.from_user.id))
    await send_links_page(callback.message, links, page, state)
    await callback.answer()

@router.callback_query(F.data == "back_to_links")
async def back_to_links(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    data = await state.get_data()
    links = get_links_by_user(callback.from_user.id)
    page = data.get("page", 1)
    await send_links_page(callback.message, links, page, state)
    await callback.answer()

@router.callback_query(F.data.startswith("link:"))
async def show_link_card(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    try:
        link_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    user_id = callback.from_user.id
    link = get_link_by_id(link_id, user_id)
    if not link:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    _, _, long_url, short_url, title, vk_key, created_at = link
    created_str = format_date(created_at)
    stats = await get_link_stats(vk_key, VK_TOKEN)
    views = stats.get("views", 0)

    text = (
        f"üìç {title}\n"
        f"üîó <a href='{short_url}'>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
        f"üåê <a href='{long_url}'>–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
        f"üìÜ {created_str}\n"
        f"üëÅ {views} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"
    )
    await callback.message.edit_text(
        text,
        reply_markup=get_link_card_keyboard(link_id),
        parse_mode="HTML"
    )
    await state.update_data(card_msg_id=callback.message.message_id)
    await callback.answer()

@router.callback_query(F.data.startswith("stats:"))
async def show_stats(callback: CallbackQuery):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    try:
        link_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    user_id = callback.from_user.id
    link = get_link_by_id(link_id, user_id)
    if not link:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    _, _, _, short_url, _, vk_key, _ = link
    stats = await get_link_stats(vk_key, VK_TOKEN)
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {hlink(short_url, short_url)}\n{format_link_stats(stats, short_url)}"
    await callback.message.edit_text(text, reply_markup=get_stats_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "back_from_stats")
async def back_from_stats(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    data = await state.get_data()
    links = get_links_by_user(callback.from_user.id)
    page = data.get("page", 1)
    await send_links_page(callback.message, links, page, state)
    await callback.answer()

@router.callback_query(F.data.startswith("rename:"))
async def ask_new_title(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    try:
        link_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    await state.set_state(LinkStates.waiting_for_new_title)
    await state.update_data(rename_link_id=link_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:", reply_markup=get_rename_keyboard(link_id))
    await callback.answer()

@router.callback_query(F.data.startswith("copy:"))
async def copy_link(callback: CallbackQuery):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    short_url = callback.data.split(":", 1)[1]
    await callback.message.answer(
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {hlink(short_url, short_url)}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
        reply_markup=get_main_inline_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("rename_single:"))
async def rename_single_link(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    try:
        link_id = int(callback.data.split(":", 2)[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Å—ã–ª–∫–∏", show_alert=True)
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    await state.set_state(LinkStates.waiting_for_new_title)
    await state.update_data(rename_link_id=link_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:", reply_markup=get_rename_keyboard(link_id))
    await callback.answer()

@router.callback_query(F.data == "copy_all")
async def copy_all_links(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    data = await state.get_data()
    successful_links = data.get("successful_links", [])
    if not successful_links:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    text = "üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫–∏:\n"
    for i, link in enumerate(successful_links, 1):
        text += f"{i}. {link['title']} ‚Äî {link['short_url']}\n"
    text += "\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
    await callback.message.edit_text(text, reply_markup=get_main_inline_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "rename_mass")
async def rename_mass_links(callback: CallbackQuery, state: FSMContext):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    data = await state.get_data()
    successful_links = data.get("successful_links", [])
    if not successful_links:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        return
    await state.set_state(LinkStates.waiting_for_mass_title)
    await state.update_data(
        urls=[(link["short_url"], link["title"], link["link_id"]) for link in successful_links],
        current_url=successful_links[0]["short_url"],
        current_title=successful_links[0]["title"],
        successful_links=[],
        failed_links=data.get("failed_links", [])
    )
    await callback.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {successful_links[0]['short_url']} (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_shorten")]
        ])
    )
    await callback.answer()

@router.message(LinkStates.waiting_for_new_title)
async def set_new_title(message: Message, state: FSMContext):
    await safe_delete(message)
    new_title = message.text.strip()
    data = await state.get_data()
    link_id = data.get("rename_link_id")
    card_msg_id = data.get("card_msg_id")
    user_id = message.from_user.id
    if not new_title or len(new_title) > 100:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        return
    await message.answer("–û–±–Ω–æ–≤–ª—è—é –Ω–∞–∑–≤–∞–Ω–∏–µ...")
    if rename_link(link_id, user_id, new_title):
        link = get_link_by_id(link_id, user_id)
        if link:
            _, _, long_url, short_url, _, vk_key, created_at = link
            created_str = format_date(created_at)
            stats = await get_link_stats(vk_key, VK_TOKEN)
            views = stats.get("views", 0)
            text = (
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"üìç {new_title}\n"
                f"üîó <a href='{short_url}'>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
                f"üåê <a href='{long_url}'>–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
                f"üìÜ {created_str}\n"
                f"üëÅ {views} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
            )
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=card_msg_id,
                    text=text,
                    reply_markup=get_link_card_keyboard(link_id),
                    parse_mode="HTML"
                )
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.answer(
                    text,
                    reply_markup=get_link_card_keyboard(link_id),
                    parse_mode="HTML"
                )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                reply_markup=get_main_inline_keyboard(),
                parse_mode="HTML"
            )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_inline_keyboard(),
            parse_mode="HTML"
        )
    await state.clear()

@router.callback_query(F.data.startswith("delete:"))
async def confirm_delete(callback: CallbackQuery):
    await cleanup_old_messages(callback.bot, callback.message.chat.id, callback.message.message_id)
    parts = callback.data.split(":")
    try:
        action = parts[1]
        link_id = int(parts[2]) if len(parts) > 2 else int(parts[1])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    user_id = callback.from_user.id

    if action == "yes":
        await callback.message.answer("–£–¥–∞–ª—è—é —Å—Å—ã–ª–∫—É...")
        if delete_link(link_id, user_id):
            try:
                await callback.message.delete()
                await callback.message.answer(
                    "‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                    reply_markup=get_main_inline_keyboard(),
                    parse_mode="HTML"
                )
            except TelegramBadRequest as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback.message.answer(
                    "‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                    reply_markup=get_main_inline_keyboard(),
                    parse_mode="HTML"
                )
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                reply_markup=get_main_inline_keyboard(),
                parse_mode="HTML"
            )
    elif action == "no":
        link = get_link_by_id(link_id, user_id)
        if not link:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                reply_markup=get_main_inline_keyboard(),
                parse_mode="HTML"
            )
            return
        _, _, long_url, short_url, title, vk_key, created_at = link
        created_str = format_date(created_at)
        stats = await get_link_stats(vk_key, VK_TOKEN)
        views = stats.get("views", 0)
        text = (
            f"üìç {title}\n"
            f"üîó <a href='{short_url}'>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
            f"üåê <a href='{long_url}'>–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
            f"üìÜ {created_str}\n"
            f"üëÅ {views} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"
        )
        await callback.message.edit_text(
            text,
            reply_markup=get_link_card_keyboard(link_id),
            parse_mode="HTML"
        )
    else:
        link = get_link_by_id(link_id, user_id)
        if not link:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
                reply_markup=get_main_inline_keyboard(),
                parse_mode="HTML"
            )
            return
        _, _, long_url, short_url, title, vk_key, created_at = link
        created_str = format_date(created_at)
        stats = await get_link_stats(vk_key, VK_TOKEN)
        views = stats.get("views", 0)
        text = (
            f"üìç {title}\n"
            f"üîó <a href='{short_url}'>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
            f"üåê <a href='{long_url}'>–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>\n"
            f"üìÜ {created_str}\n"
            f"üëÅ {views} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n\n<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:</b>"
        )
        await callback.message.edit_text(
            text,
            reply_markup=get_delete_confirm_keyboard(link_id),
            parse_mode="HTML"
        )
    await callback.answer()

def setup_handlers(dp):
    dp.include_router(router)
