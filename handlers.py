from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup  # –î–æ–±–∞–≤–ª–µ–Ω InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import CommandStart
from keyboards import get_main_keyboard, get_link_actions_keyboard, get_back_keyboard
from database import save_link, get_links_by_user, get_link_by_id, delete_link, rename_link
from vkcc import shorten_link, get_link_stats
from utils import safe_delete, is_valid_url, format_link_stats
from config import MAX_LINKS_PER_BATCH, VK_TOKEN
import asyncio

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class LinkStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_title = State()
    waiting_for_mass_title = State()
    waiting_for_new_title = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await safe_delete(message)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!\n\n"
        "üîó –ß—Ç–æ —è —É–º–µ—é:\n"
        "- –°–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –¥–æ 50 —Å—Å—ã–ª–æ–∫ —Å –ø–æ–¥–ø–∏—Å—è–º–∏.\n"
        "- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–ª–∏–∫–∏, –≥–µ–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤, –ø–æ–ª/–≤–æ–∑—Ä–∞—Å—Ç).\n"
        "- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∞–º–∏: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(F.text == "/cancel")
async def cancel_command(message: Message, state: FSMContext):
    await safe_delete(message)
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É"
@router.message(F.text == "üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def shorten_link_start(message: Message, state: FSMContext):
    await safe_delete(message)
    await message.answer("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏).", reply_markup=ReplyKeyboardRemove())
    await state.set_state(LinkStates.waiting_for_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
@router.message(LinkStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    await safe_delete(message)
    urls = [line.strip() for line in message.text.split("\n") if line.strip()]
    if len(urls) > MAX_LINKS_PER_BATCH:
        await message.answer(f"üö´ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º {MAX_LINKS_PER_BATCH} —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ —á–∞—Å—Ç—è–º.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    if not urls:
        await message.answer("üö´ –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        await state.clear()
        return

    await state.update_data(urls=urls)
    if len(urls) == 1:
        await message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip).")
        await state.set_state(LinkStates.waiting_for_title)
    else:
        await state.set_state(LinkStates.waiting_for_mass_title)
        await process_mass_urls(message, state)

async def process_mass_urls(message: Message, state: FSMContext):
    data = await state.get_data()
    urls = data.get("urls", [])
    if not urls:
        await message.answer("üö´ –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    current_url = urls.pop(0)
    await state.update_data(urls=urls, successful_links=[], failed_links=[])
    if "|" in current_url:
        url_part, _ = [part.strip() for part in current_url.split("|", 1)]
    else:
        url_part = current_url
    if not is_valid_url(url_part):
        failed_links = await state.get_data().get("failed_links", [])
        failed_links.append(f"–°—Ç—Ä–æ–∫–∞: '{current_url}' ‚Äî —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞.")
        await state.update_data(failed_links=failed_links)
        if urls:
            await process_mass_urls(message, state)
        else:
            await finalize_mass_processing(message, state)
        return
    if not url_part.startswith(("http://", "https://")):
        url_part = "https://" + url_part
    await message.answer(f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ '{url_part}' (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip).")
    await state.update_data(current_url=url_part)
    await state.set_state(LinkStates.waiting_for_mass_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏
@router.message(LinkStates.waiting_for_title)
async def process_single_title(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    urls = data.get("urls", [])
    title = message.text.strip() if message.text != "/skip" else None
    url = urls[0] if "|" not in urls[0] else urls[0].split("|")[0].strip()
    if not is_valid_url(url):
        await message.answer("üö´ –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    if not url.startswith(("http://", "https://")):
        url = "https://" + url
    try:
        short_url = await shorten_link(url, VK_TOKEN)
        vk_key = short_url.split("/")[-1]
        if await save_link(message.from_user.id, url, short_url, title, vk_key):
            await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n{title or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}:\n{short_url}", reply_markup=get_main_keyboard())
        else:
            await message.answer(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ '{url}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏: {str(e)}", reply_markup=get_main_keyboard())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
@router.message(LinkStates.waiting_for_mass_title)
async def process_mass_title(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    urls = data.get("urls", [])
    current_url = data.get("current_url")
    title = message.text.strip() if message.text != "/skip" else None
    try:
        short_url = await shorten_link(current_url, VK_TOKEN)
        vk_key = short_url.split("/")[-1]
        if await save_link(message.from_user.id, current_url, short_url, title, vk_key):
            successful_links = data.get("successful_links", [])
            successful_links.append({"title": title or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏", "short_url": short_url})
            await state.update_data(successful_links=successful_links)
        else:
            failed_links = data.get("failed_links", [])
            failed_links.append(f"–°—Å—ã–ª–∫–∞ '{current_url}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            await state.update_data(failed_links=failed_links)
    except Exception as e:
        failed_links = data.get("failed_links", [])
        failed_links.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ '{current_url}': {str(e)}")
        await state.update_data(failed_links=failed_links)

    if urls:
        await process_mass_urls(message, state)
    else:
        await finalize_mass_processing(message, state)

async def finalize_mass_processing(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    successful_links = data.get("successful_links", [])
    failed_links = data.get("failed_links", [])
    response = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(successful_links)}.\n\n"
    if successful_links:
        response += "üìã –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ):\n"
        for i, link in enumerate(successful_links, 1):
            response += f"{i}. {link['title']}:\n{link['short_url']}\n"
    if failed_links:
        response += "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(failed_links)
    sent_message = await message.answer(response, reply_markup=get_main_keyboard())
    await asyncio.sleep(10)
    await safe_delete(sent_message)
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏"
@router.message(F.text == "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
async def show_links(message: Message):
    await safe_delete(message)
    links = await get_links_by_user(message.from_user.id)
    if not links:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.", reply_markup=get_main_keyboard())
        return
    keyboard = []
    for link in links:
        link_id, title, short_url, _ = link
        keyboard.append(get_link_actions_keyboard(link_id, title or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏", short_url))
    keyboard.append(get_back_keyboard())
    sent_message = await message.answer("üìã –í–∞—à–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await asyncio.sleep(10)
    await safe_delete(sent_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def process_callback(callback: CallbackQuery):
    await safe_delete(callback.message)
    user_id = callback.from_user.id
    action, link_id = callback.data.split("_")
    link = await get_link_by_id(int(link_id), user_id)

    if not link or link[1] != user_id:
        await callback.answer("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞.")
        return

    link_id, _, long_url, short_url, title, vk_key, _ = link

    if action == "stats":
        try:
            stats = await get_link_stats(vk_key, VK_TOKEN)
            formatted_stats = format_link_stats(stats, short_url)
            sent_message = await callback.message.answer(formatted_stats, reply_markup=get_back_keyboard())
            await asyncio.sleep(15)
            await safe_delete(sent_message)
        except Exception as e:
            await callback.message.answer(f"üìâ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_back_keyboard())

    elif action == "rename":
        await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏.", reply_markup=ReplyKeyboardRemove())
        await callback.answer()
        await callback.message.bot.set_state(callback.from_user.id, LinkStates.waiting_for_new_title, callback.message.chat.id)
        await callback.message.bot.set_data(callback.from_user.id, {"link_id": link_id})

    elif action == "delete":
        sent_message = await callback.message.answer(f"‚ùó –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É {short_url}?\n[‚úÖ –î–∞] [‚ùå –ù–µ—Ç]", reply_markup=get_link_actions_keyboard(link_id, title or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏", short_url, delete_confirm=True))
        await callback.answer()
        await asyncio.sleep(5)
        await safe_delete(sent_message)

    elif action == "delete_yes":
        if await delete_link(link_id, user_id):
            await callback.message.answer("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_keyboard())
        else:
            await callback.message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", reply_markup=get_main_keyboard())
        await callback.answer()

    elif action == "delete_no":
        await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_link_actions_keyboard(link_id, title or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏", short_url))
        await callback.answer()

    elif action == "back":
        await show_links(callback.message)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(LinkStates.waiting_for_new_title)
async def process_new_title(message: Message, state: FSMContext):
    await safe_delete(message)
    data = await state.get_data()
    link_id = data.get("link_id")
    if await rename_link(link_id, message.from_user.id, message.text.strip()):
        await message.answer("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
    else:
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.", reply_markup=get_main_keyboard())
    await state.clear()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)
